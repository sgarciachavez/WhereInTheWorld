{"version":3,"sources":["images/moon-white.svg","images/mag-glass.svg","images/mag-glass_blk.svg","images/left-arrow.svg","images/left-arrow-blk.svg","Countries.js","SearchContainer.js","Borders.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Countries","display","countries","this","props","length","map","country","to","pathname","search","alpha3Code","key","style","textDecoration","color","className","backgroundImage","flag","backgroundSize","overflow","backgroundRepeat","backgroundPosition","name","population","region","capital","Component","SearchContainer","state","handleChange","event","setState","target","value","fetchCountries","console","log","window","location","href","searchParams","URLSearchParams","get","fields","url","fetch","then","res","json","data","catch","theme","localStorage","getItem","InputGroup","type","placeholder","onChange","Append","Button","variant","src","mglass_blk","mglass","alt","DropdownButton","id","title","Dropdown","Item","Borders","borders","codes","join","undefined","getBorders","item","size","CountryDetails","code","currencies","languages","iso639_1","blk_arrow","arrow","nativeName","subregion","topLevelDomain","App","label","toggleTheme","updateState","document","documentElement","setAttribute","setItem","moonw","onClick","exact","path","process","component","render","Boolean","hostname","match","ReactDOM","basename","forceRefresh","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc6c7212.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moon-white.74556d31.svg\";","module.exports = __webpack_public_path__ + \"static/media/mag-glass.6650aba8.svg\";","module.exports = __webpack_public_path__ + \"static/media/mag-glass_blk.6f5fc00b.svg\";","module.exports = __webpack_public_path__ + \"static/media/left-arrow.c5dfb360.svg\";","module.exports = __webpack_public_path__ + \"static/media/left-arrow-blk.fc68b46a.svg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Countries extends Component{\n  render(){\n    let countries = this.props.countries\n    let display;\n    if(countries.length > 0){\n      display = countries.map((country)=> (\n        <Link\n          to={{pathname: '/country/', search: `?code=${country.alpha3Code}`}}\n          key={country.alpha3Code} style={{ textDecoration: 'none', color: 'white' }}>\n            <div className=\"card\" >\n              <div className=\"flag\"\n                style={{\n                  backgroundImage: `url(${country.flag})`,\n                  backgroundSize: 'cover',\n                  overflow: 'hidden',\n                  backgroundRepeat  : 'no-repeat',\n                  backgroundPosition: 'center',\n                }}>\n              </div>\n              <div className=\"summary\">\n                <p>{country.name}</p>\n                <p className=\"info\">\n                  Population: {country.population}<br/>\n                  Region: {country.region}<br/>\n                  Capital: {country.capital}\n                </p>\n              </div>\n            </div>\n        </Link>\n      )) \n    }else{\n      display = <p className='title'>No countries found</p>\n    }\n\n    return(\n      <div className=\"card-container\">\n        {display}\n      </div>\n    )\n  }\n}\n\nexport default Countries\n","import React, { Component } from 'react';\nimport Countries from './Countries.js'\nimport {DropdownButton, Dropdown, InputGroup} from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport mglass from './images/mag-glass.svg';\nimport mglass_blk from './images/mag-glass_blk.svg';\n\nclass SearchContainer extends Component{\n  state = {\n       countries: [],\n       search: \"\"\n     }\n\n     handleChange=(event) => {\n      this.setState({search:event.target.value})\n    }\n\n    fetchCountries = () => {\n        console.log(window.location.href)\n        const searchParams = new URLSearchParams(window.location.search);\n        let name = searchParams.get('name');\n        let region = searchParams.get('region');\n        \n        if(this.state.search.length > 0){\n          name = this.state.search\n        }\n\n        const fields = \"?fields=name;population;region;capital;flag;alpha3Code\";\n        let url = 'https://restcountries.eu/rest/v2/all' + fields;\n        console.log(\"name = \" + name)\n        console.log(\"region = \" + region)\n        console.log(\"state = \" + this.state.search)\n  \n        if(region !== null){\n          url = 'https://restcountries.eu/rest/v2/region/' + region + fields;\n        }else if(name != null){\n          url = 'https://restcountries.eu/rest/v2/name/' + name + fields;\n        }\n        \n        fetch(url)\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({ countries: data })\n          if(this.state.countries.length > 0){\n              //console.log(\"Fetched! \")\n              //console.log(this.state.countries.map(c => console.log(c.name)))\n          }\n        })\n        .catch(console.log(\"catch!\"))\n    }\n\n  componentDidMount() {\n    this.fetchCountries()\n  }\n\n  render(){\n    let url = `/WhereInTheWorld/search/?name=${this.state.search}`;\n    let theme = localStorage.getItem( 'theme' );\n    return(\n      <div className=\"container\">\n        <div className=\"search-area\">\n         <div>\n           <InputGroup className=\"mb-3\">\n            <form >\n              <input type=\"text\"\n                  placeholder=\"Search for a country...\"\n                  className=\"search-string\"\n                  value={this.state.search}\n                  onChange={this.handleChange}/>\n              </form>\n               <InputGroup.Append>\n                <Button variant=\"outline-secondary\" href={url}>\n                  <img src={theme === \"light\" ? mglass_blk : mglass } className=\"\" alt=\"magnifying glass\" />\n                </Button>\n               </InputGroup.Append>\n             </InputGroup>\n         </div>\n         <div>\n           <DropdownButton id=\"region-filter\" title=\"Filter by Region\" variant={theme}>\n             <Dropdown.Item href=\"/WhereInTheWorld\">All Regions</Dropdown.Item>\n             <Dropdown.Item href=\"?region=Africa\">Africa</Dropdown.Item>\n             <Dropdown.Item href=\"?region=Americas\">Americas</Dropdown.Item>\n             <Dropdown.Item href=\"?region=Asia\">Asia</Dropdown.Item>\n             <Dropdown.Item href=\"?region=Europe\">Europe</Dropdown.Item>\n             <Dropdown.Item href=\"?region=Oceania\">Oceania</Dropdown.Item>\n           </DropdownButton>\n         </div>\n      </div>\n        <Countries countries={this.state.countries}/>\n      </div>\n    )\n  }\n}\n\nexport default SearchContainer\n","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass Borders extends Component{\n  state = {\n       borders: [],\n       fetch: true\n     }\n\n     getBorders(){\n       if(this.state.fetch){\n         const url = \"https://restcountries.eu/rest/v2/alpha?codes=\" + this.props.codes.join(\";\")\n         fetch(url)\n         .then(res => res.json())\n         .then((data) => {\n           this.setState({ borders: data,fetch: false});\n         })\n         .catch(console.log)\n       }\n     }\n\n  render(){\n    const theme = localStorage.getItem( 'theme' );\n    if(this.props.codes !== undefined){\n      this.getBorders();\n    }\n\n    if(this.state.borders !== undefined && this.state.borders.length > 0 ){\n      this.borders = this.state.borders.map((item, key) =>{\n        let url = `./?code=${item.alpha3Code}`\n        return (\n          <Button variant={theme} key={item.alpha3Code} href={url} size=\"sm\" className=\"border-country\">\n            {item.name}\n          </Button>\n        )\n      });\n    }\n    return(\n      <div><strong>Border Countries:</strong> {this.borders}</div>\n    )\n  }\n}\nexport default Borders\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport arrow from './images/left-arrow.svg';\nimport blk_arrow from './images/left-arrow-blk.svg';\nimport Borders from './Borders.js'\n\nclass CountryDetails extends Component{\n  state = {\n       country: {}\n     }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n    console.log(\"code: \" + code)\n    if(code !== null){\n      const fields = \"?fields=name;nativeName;population;region;subregion;capital;topLevelDomain;currencies;languages;borders;flag\";\n      let url = 'https://restcountries.eu/rest/v2/alpha/' + code + fields;\n\n      fetch(url)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ country: data });\n      })\n      .catch(console.log)\n    }\n  }\n\n  render(){\n    const theme = localStorage.getItem( 'theme' );\n    if(this.state.country.currencies !== undefined){\n      this.currencies = this.state.country.currencies.map((item, key) =>\n            <li key={item.code}>{item.name}</li>\n          );\n    }\n\n    if(this.state.country.languages !== undefined){\n      this.languages = this.state.country.languages.map((item, key) =>\n            <li key={item.iso639_1}>{item.name}</li>\n          );\n    }\n\n    return(\n      <div className=\"details-container\">\n        <Link to='/'>\n          <Button variant={theme}>\n            <img src={theme === \"light\" ? blk_arrow : arrow} className=\"moonw\" alt=\"left arrow\" />\n            Back to all countries\n          </Button>\n        </Link>\n        <div className=\"country-info\">\n          <div className=\"flag-container\">\n            <img src={this.state.country.flag}  alt=\"left arrow\" className=\"responsive\"/>\n          </div>\n\n          <div className=\"info-container\">\n            <p><strong>{this.state.country.name}</strong></p>\n            <div className=\"specs-container\">\n                <div className=\"column\">\n                  <p className=\"info\">\n                    <strong>Native Name:</strong> {this.state.country.nativeName}<br/>\n                    <strong>Population:</strong> {this.state.country.population}<br/>\n                    <strong>Region:</strong> {this.state.country.region}<br/>\n                    <strong>Sub Region:</strong> {this.state.country.subregion}<br/>\n                    <strong>Capital:</strong> {this.state.country.capital}<br/>\n                    <strong>Top Level Domain:</strong> {this.state.country.topLevelDomain}\n                  </p>\n                </div>\n                <div className=\"column info\">\n                    <strong>Currencies:</strong> <ul>{this.currencies}</ul>\n                    <strong>Languages:</strong> <ul>{this.languages}</ul>\n                </div>\n            </div>\n            <Borders codes={this.state.country.borders}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CountryDetails\n","import React, { Component } from 'react';\nimport moonw from './images/moon-white.svg';\nimport SearchContainer from './SearchContainer.js'\nimport CountryDetails from './CountryDetails.js'\nimport './style/App.css';\nimport { Route, Switch } from 'react-router-dom'\nimport { Button } from 'react-bootstrap';\n\n\nclass App extends Component {\n  state = {\n       theme: \"dark\",\n       label: \"Dark\"\n     }\n\n     toggleTheme = ()=> {\n         var theme = this.state.theme === \"dark\" ? \"light\" : \"dark\";\n         this.updateState(theme);\n      }\n\n      updateState = (theme) => {\n        if(theme === null){\n          theme = \"dark\";\n        }\n        this.setState({ theme: theme });\n        var label = theme === \"dark\" ? \"Dark\" : \"Light\";\n        this.setState({label: label});\n        document.documentElement.setAttribute(\"data-theme\", theme);\n        localStorage.setItem( 'theme', theme );\n      }\n\n      componentDidMount(){\n        this.updateState(localStorage.getItem( 'theme' ));\n      }\n\n     render(){\n\n       return (\n         <div className=\"main\">\n           <div className=\"title-container\">\n             <div className=\"title\">Where in the world?</div>\n             <div className=\"mode\">\n               <img src={moonw} className=\"moonw\" alt=\"moon\" />\n               <Button className=\"mode-button\"\n                  variant={this.state.theme} onClick={this.toggleTheme}>\n                 {this.state.label} Mode\n               </Button>\n             </div>\n           </div>\n          \n          <Switch>\n            <Route exact path={[process.env.PUBLIC_URL + '/', process.env.PUBLIC_URL + '/search']} component={SearchContainer} />\n            <Route path='process.env.PUBLIC_URL + /country' > <CountryDetails />  </Route>\n            <Route render={() => <h1 variant={this.state.theme}>404: page not found</h1>} />\n          </Switch>\n         </div>\n       )\n     }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  \n  <BrowserRouter basename=\"WhereInTheWorld\" forceRefresh={true}>\n    <App />\n  </BrowserRouter>,\n  \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}